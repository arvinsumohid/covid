{"version":3,"sources":["components/SearchResult/index.js","components/Search/index.js","components/Header/index.js","components/Body/index.js","components/Holder/index.js","components/Row/index.js","components/Column/index.js","components/Row2Column/index.js","components/Heading/index.js","pages/Homepage/index.js","components/LineGraph/index.js","store/actions/index.js","pages/Country/index.js","components/App/Routing.js","components/Main/index.js","components/App/index.js","serviceWorker.js","store/reducers/index.js","index.js"],"names":["SearchResult","result","className","map","country","index","key","to","Slug","Country","Search","countries","useSelector","state","useState","setResult","inputChange","evt","value","target","filteredCountries","countryfiltered","forEach","push","dropdownFunc","Object","values","filter","toLowerCase","includes","type","onChange","name","placeholder","autoComplete","Header","Body","children","Holder","rest","Row","Column","Row2Column","props","title","Heading","classname","text","Homepage","summary","error","itemFunc","item","heading","data","row","i","rowFunc","LineGraph","options","console","log","width","height","chartType","loader","hAxis","vAxis","rootProps","handleErrors","response","ok","Error","statusText","dispatch","fetch","process","then","res","json","payload","catch","useDispatch","match","params","selectedCountry","loading","staticData","setStaticData","graphData","setGraphData","useEffect","allActions","month","graph","statistic","cur_month","Date","getMonth","prev_month","cur_data","prev_data","countCountry","length","Deaths","Recovered","Active","petsa","getDate","getFullYear","Confirmed","headingFunc","Routing","path","component","Main","App","Boolean","window","location","hostname","initialCountriesState","action","Global","NewConfirmed","NewDeaths","NewRecovered","TotalConfirmed","TotalDeaths","TotalRecovered","holder","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6a5a610a.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport './index.scss'\r\n\r\nconst SearchResult = ({result}) => {\r\n    // console.log(result)\r\n    return (\r\n        <ul className=\"search-result\">\r\n            {result.map((country, index) => {\r\n\r\n                return (\r\n                    <li key={index}>\r\n                        <Link to={`/${country.Slug}`}>{country.Country}</Link>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default SearchResult\r\n","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport SearchResult from '../../components/SearchResult/';\r\n\r\nimport './index.scss'\r\n\r\nfunction Search() {\r\n    const {countries} = useSelector(state => state)\r\n    const [result, setResult] = useState([])\r\n\r\n    const inputChange = (evt) => {\r\n        const {value} = evt.target\r\n        const filteredCountries = Object.values(countries).filter(country => country.Country.toLowerCase().includes(value.toLowerCase()) === true )\r\n        dropdownFunc(filteredCountries)\r\n    }\r\n\r\n    function dropdownFunc(filteredCountries) {\r\n        const countryfiltered = [];\r\n\r\n        filteredCountries.forEach((country) => {\r\n            countryfiltered.push(country)\r\n        })\r\n        setResult(countryfiltered)\r\n    }\r\n\r\n    return (\r\n        <div className=\"search\">\r\n            <input type=\"text\" onChange={(evt) => inputChange(evt) } name=\"search\" placeholder=\"Country\" autoComplete=\"off\" />\r\n            <SearchResult result={result} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Search from '../Search'\r\n\r\nimport './index.scss'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <Search />\r\n            <div className=\"homebox\">\r\n                <Link to={`/`}>Home</Link>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\nimport Header from '../Header'\r\n\r\nconst Body = ({children}) => {\r\n    return (\r\n        <div>\r\n            <Header />\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Body\r\n","import React from 'react'\r\n\r\nimport './index.scss'\r\n\r\nconst Holder = ({className='', children, ...rest}) => {\r\n\r\n    return (\r\n        <div className={`container ${className}`} {...rest}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Holder","import React from 'react'\r\n\r\nimport './index.scss';\r\n\r\nconst Row = ({className='', children, ...rest}) => {\r\n    return (\r\n        <div className={`row ${className}`} {...rest}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","import React from 'react'\r\n\r\nimport './index.scss';\r\n\r\nconst Column = ({className='', children, ...rest}) => {\r\n    return (\r\n        <div className={`column ${className}`} {...rest}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Column\r\n","import React from 'react'\r\n\r\nimport Row from \"../../components/Row\"\r\nimport Column from \"../../components/Column\"\r\n\r\nimport './index.scss'\r\n\r\nconst Row2Column = (props) => {\r\n    const { title, value } = props\r\n\r\n    return (\r\n        <Row className=\"align-center\">\r\n            <Column className=\"large-12\">\r\n                <h3>{title}</h3>\r\n            </Column>\r\n            <Column className=\"large-12\">\r\n                <p>{value}</p>\r\n            </Column>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Row2Column\r\n","import React from 'react'\r\n\r\nimport './index.scss'\r\n\r\nconst Heading = ({classname=\"\", text}) => {\r\n    return (\r\n        <div className={`heading ${classname}`}>\r\n            <h2>{text}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Heading\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport Body from \"../../components/Body\"\r\nimport Holder from \"../../components/Holder\"\r\nimport Row2Column from \"../../components/Row2Column\"\r\nimport Heading from \"../../components/Heading\"\r\n\r\nconst Homepage = () => {\r\n    const {summary} = useSelector(state => state.summary)\r\n    const {error} = useSelector(state => state)\r\n\r\n    function itemFunc(item, index) {\r\n        \r\n        return (<Holder key={index} className=\"large-6 space-bottom-3\">\r\n            <Heading text={item.heading} />\r\n            {item.data.map((row, i) => {\r\n                return rowFunc(row, i)\r\n            })}\r\n        </Holder>)\r\n    }\r\n\r\n    function rowFunc(row, index) {\r\n        return <Row2Column key={index} title={row.title} value={row.value} />\r\n    }\r\n\r\n    const success = () => {\r\n        return (\r\n            <Body>\r\n                <Holder className=\"text-center holder large-10 space-top-5\">\r\n                    {summary.map((item, index) => {\r\n                        return itemFunc(item, index)\r\n                    })}\r\n                </Holder>\r\n            </Body>\r\n        )\r\n    }\r\n\r\n    const process = () => {\r\n        return (\r\n            <Body>\r\n                <Holder className=\"text-center holder large-10 space-top-5\">\r\n                    Loading\r\n                </Holder>\r\n            </Body>\r\n        )\r\n    }\r\n\r\n    const errorFunc = () => {\r\n        return (\r\n            <Body>\r\n                <Holder className=\"text-center holder large-10 space-top-5\">\r\n                    {error}\r\n                </Holder>\r\n            </Body>\r\n        )\r\n    }\r\n    \r\n    if( !summary )\r\n        return process()\r\n    else if ( error)\r\n        return errorFunc()\r\n    else\r\n        return success()\r\n\r\n}\r\n\r\nexport default Homepage","import React from 'react'\r\nimport Chart from \"react-google-charts\";\r\n\r\nconst LineGraph = ({data, options}) => {\r\n    console.log(data)\r\n    return (\r\n        <Chart\r\n            width={'100%'}\r\n            height={'400px'}\r\n            chartType=\"LineChart\"\r\n            loader={<div>Loading Chart</div>}\r\n            data={data}\r\n            options={{\r\n                hAxis: {\r\n                title: 'Month',\r\n                },\r\n                vAxis: {\r\n                title: 'Numbers',\r\n                },\r\n            }}\r\n            rootProps={{ 'data-testid': '1' }}\r\n        />\r\n    )\r\n}\r\n\r\n\r\n// [\r\n//     ['Month', 'Death', 'Recovered'],\r\n//     [0, 0, 10],\r\n//     [1, 10, 6],\r\n//     [2, 23, 46],\r\n//     [3, 17, 34],\r\n//     [4, 18, 7],\r\n//     [5, 9, 24],\r\n//     [6, 11, 18],\r\n//     [7, 27, 6],\r\n//     [8, 33, 34],\r\n//     [9, 40, 3],\r\n//     [10, 32, 1],\r\n//     [11, 35, 0],\r\n// ]\r\n\r\nexport default LineGraph\r\n","\r\n\r\nconst countries = () => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: 'FETCH_COUNTRIES_BEGIN'\r\n        })\r\n\r\n        return fetch(`${process.env.REACT_APP_COVID_19_API_COUNTRIES_URL}`)\r\n                .then(handleErrors)\r\n                .then(res => res.json())\r\n                .then(json => {\r\n                    dispatch({\r\n                        type: 'FETCH_COUNTRIES_SUCCESS',\r\n                        payload: { ...json }\r\n                    })\r\n\r\n                    return json\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: 'FETCH_COUNTRIES_FAILURE',\r\n                        payload: { error }\r\n                    })\r\n                })\r\n    }\r\n}\r\n\r\n// get information for specific country\r\nconst country = (country) => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: 'FETCH_COUNTRY_BEGIN'\r\n        })\r\n\r\n        return fetch(`${process.env.REACT_APP_COVID_19_API_COUNTRY_URL}/${country}`)\r\n                .then(handleErrors)\r\n                .then(res => res.json())\r\n                .then(json => {\r\n                    dispatch({\r\n                        type: 'FETCH_COUNTRY_SUCCESS',\r\n                        payload: { ...json }\r\n                    })\r\n\r\n                    return json\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: 'FETCH_COUNTRY_FAILURE',\r\n                        payload: { error }\r\n                    })\r\n                })\r\n\r\n    }\r\n}\r\n\r\n//summary of all countries\r\nconst countriesSummary = (country) => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: 'FETCH_SUMMARY_BEGIN'\r\n        })\r\n\r\n        return fetch(`${process.env.REACT_APP_COVID_19_API_SUMMARY_URL}`)\r\n        .then(handleErrors)\r\n        .then(res => res.json())\r\n        .then(json => {\r\n            dispatch({\r\n                type: 'FETCH_SUMMARY_SUCCESS',\r\n                payload: { ...json }\r\n            })\r\n\r\n            return json\r\n        })\r\n        .catch(error => {\r\n            dispatch({\r\n                type: 'FETCH_SUMMARY_FAILURE',\r\n                payload: { error }\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nfunction handleErrors(response) {\r\n    if( !response.ok )\r\n        throw Error(response.statusText)\r\n\r\n    return response\r\n}\r\n\r\nexport default {\r\n    countries,\r\n    country,\r\n    countriesSummary\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport Body from \"../../components/Body\"\r\nimport Holder from \"../../components/Holder\"\r\nimport Row2Column from \"../../components/Row2Column\"\r\nimport Heading from \"../../components/Heading\"\r\n\r\nimport LineGraph from \"../../components/LineGraph\"\r\n\r\nimport allActions from '../../store/actions';\r\n\r\nconst Country = (props) => {\r\n    const dispatch = useDispatch()\r\n    const {country} = props.match.params\r\n    const {selectedCountry,loading, error} = useSelector(state => state)\r\n    const [staticData, setStaticData] = useState(null)\r\n    const [graphData, setGraphData] = useState([])\r\n\r\n    useEffect(() => {\r\n        dispatch(allActions.country(`${country}`))\r\n\r\n    }, [dispatch, country])\r\n\r\n    useEffect(() => {\r\n        if( selectedCountry ) {\r\n        const month = [\"JAN\",\"FEB\",\"MAR\",\"APR\",\"MAY\",\"JUN\",\"JUL\",\"AUG\",\"SEP\",\"OCT\", \"NOV\", \"DEC\"]\r\n            let graph = [\r\n                            ['Month', 'Death', 'Recovered', 'Active']\r\n                        ]\r\n            Object.values(selectedCountry).forEach((statistic, index, selectedCountry) => {\r\n                const cur_month = new Date(statistic.Date).getMonth()\r\n                const prev_month = index > 0 ? new Date(selectedCountry[index-1].Date).getMonth() : null\r\n                const cur_data = selectedCountry[index]\r\n                const prev_data = selectedCountry[index-1]\r\n                const countCountry = selectedCountry.length\r\n                \r\n    \r\n                if(prev_month !== null && prev_month !== cur_month) {\r\n                    graph.push([month[prev_month], prev_data.Deaths, prev_data.Recovered, prev_data.Active])\r\n                } else if( (index+1) === countCountry) {\r\n                    graph.push([month[cur_month], cur_data.Deaths, cur_data.Recovered, cur_data.Active])\r\n                }\r\n\r\n                if((index+1) === countCountry) {\r\n                    const petsa = new Date(statistic.Date)\r\n                    setStaticData({\r\n                        heading : [\r\n                                    statistic.Country,\r\n                                    `${month[cur_month]} ${petsa.getDate()}, ${petsa.getFullYear()}`\r\n                                ],\r\n                        row : [\r\n                            { title: 'Confirmed', value : statistic.Confirmed},\r\n                            { title: 'Active', value : statistic.Active},\r\n                            { title: 'Recovered', value : statistic.Recovered},\r\n                            { title: 'Deaths', value : statistic.Deaths},\r\n                        ]\r\n                    })\r\n                }\r\n    \r\n            })\r\n    \r\n            setGraphData( graph )\r\n    \r\n        }\r\n    }, [selectedCountry])\r\n\r\n    function headingFunc() {\r\n        if( staticData ) {\r\n            return (\r\n                    staticData.heading.map((title, index) => {\r\n                        return <Heading key={index} text={title} />\r\n                    })\r\n                )\r\n        }\r\n    }\r\n\r\n    function rowFunc() {\r\n        if( staticData ) {\r\n            return (\r\n                staticData.row.map((item, index) => {\r\n                    return <Row2Column key={index} title={item.title} value={item.value} />\r\n                })\r\n            )\r\n        }\r\n    }\r\n\r\n    const success = () => {\r\n        return (\r\n            <Body>\r\n                <Holder className=\"text-center holder large-10 space-top-5\">\r\n                    <Holder className=\"large-10 space-bottom-3\">\r\n                        {headingFunc()}\r\n                        {rowFunc()}\r\n                        { selectedCountry && <LineGraph data={graphData}/> }\r\n                    </Holder>\r\n                </Holder>\r\n            </Body>\r\n        )\r\n    }\r\n\r\n    const process = () => {\r\n        return (\r\n            <Body>\r\n                <Holder className=\"text-center holder large-10 space-top-5\">\r\n                    Loading\r\n                </Holder>\r\n            </Body>\r\n        )\r\n    }\r\n\r\n    const errorFunc = () => {\r\n        return (\r\n            <Body>\r\n                <Holder className=\"text-center holder large-10 space-top-5\">\r\n                    {error}\r\n                </Holder>\r\n            </Body>\r\n        )\r\n    }\r\n    \r\n    if( loading )\r\n        return process()\r\n    else if ( error)\r\n        return errorFunc()\r\n    else\r\n        return success()\r\n}\r\n\r\nexport default Country\r\n","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\nimport Homepage from '../../pages/Homepage'\r\nimport Country from '../../pages/Country'\r\n\r\nconst Routing = () => {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route key=\"home\" path=\"/:country\" component={Country} />\r\n                <Route key=\"home\" path=\"/\" component={Homepage} />\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default Routing","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux'\r\n\r\n\r\nimport allActions from '../../store/actions';\r\n\r\n\r\nconst Main = ({classname = '', children, ...rest}) => {\r\n    const dispatch = useDispatch()\r\n  \r\n    useEffect(() => {\r\n        dispatch(allActions.countries())\r\n        dispatch(allActions.countriesSummary())\r\n    }, [dispatch])\r\n\r\n\r\n    return (\r\n        <main className={`${classname}`} {...rest}>\r\n            {children}\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux'\r\nimport Routing from './Routing';\r\nimport Main from \"../../components/Main\"\r\n\r\nimport allActions from '../../store/actions';\r\n\r\nimport './index.scss';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n      dispatch(allActions.countries())\r\n      dispatch(allActions.countriesSummary())\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <Main>\r\n      <Routing />\r\n    </Main>\r\n    )\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","\r\nconst initialCountriesState = {\r\n    countries: {},\r\n    loading: false,\r\n    error: null,\r\n    selectedCountry: {},\r\n    summary: {}\r\n  };\r\n\r\n\r\nconst country = (state = initialCountriesState, action) => {\r\n    switch( action.type ) {\r\n\r\n        //list of countries\r\n        case 'FETCH_COUNTRIES_BEGIN' : {\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: null\r\n            }\r\n        }\r\n        case 'FETCH_COUNTRIES_SUCCESS' : {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                countries: action.payload\r\n            }\r\n        }\r\n\r\n        case 'FETCH_COUNTRIES_FAILURE' : {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload.error,\r\n                countries: {}\r\n            }\r\n        }\r\n\r\n        // summary\r\n        case 'FETCH_SUMMARY_BEGIN' : {\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: null\r\n            }\r\n        }\r\n        case 'FETCH_SUMMARY_SUCCESS' : {\r\n            const {Global, Date} = action.payload\r\n            const {NewConfirmed, NewDeaths, NewRecovered, TotalConfirmed, TotalDeaths, TotalRecovered} = {...Global}\r\n            const holder = {\r\n                    summary : [\r\n                        {\r\n                            heading : 'Total',\r\n                            data : [\r\n                                { title : 'Confirmed', value : TotalConfirmed },\r\n                                { title : 'Recovered', value : TotalRecovered },\r\n                                { title : 'Deaths', value : TotalDeaths },\r\n                            ]\r\n                        },\r\n                        { \r\n                            heading : 'New',\r\n                            data : [\r\n                                { title : 'Confirmed', value : NewConfirmed },\r\n                                { title : 'Recovered', value : NewRecovered },\r\n                                { title : 'Deaths', value : NewDeaths },\r\n                            ]\r\n                        }\r\n                    ],\r\n                    Date\r\n                }\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                summary: holder\r\n            }\r\n        }\r\n\r\n        case 'FETCH_SUMMARY_FAILURE' : {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload.error,\r\n                summary: {}\r\n            }\r\n        }\r\n\r\n        // selected country\r\n        case 'FETCH_COUNTRY_BEGIN' : {\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: null\r\n            }\r\n        }\r\n        case 'FETCH_COUNTRY_SUCCESS' : {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                selectedCountry: action.payload\r\n            }\r\n        }\r\n\r\n        case 'FETCH_COUNTRY_FAILURE' : {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload.error,\r\n                selectedCountry: {}\r\n            }\r\n        }\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport default country","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from './store/reducers';\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk) );\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}